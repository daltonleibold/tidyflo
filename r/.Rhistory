.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.5) +
theme_custom
}
plot.density(data = data)
#----
#' @name plot.density
#' @param data a dataframe of flow cytometry data
#' @param x an object; the channel to plot on the x axis; defaults to fsc (forward scatter)
#' @param y an object; the channel to plot on the y axis; defaults to ssc (side scatter)
#' @param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to area because this is the most commonly analyzed metric of fluorescent intensity.
#' @description
#' a wrapper for making a ggplot object of the density of cells on two axes. creates a density column that estimates distance of each observation from the center of the channel. the product of density on both channels defines the density of cells.
plot.density <- function(data, x = fsc, y = ssc, param = ".a"){
data %>%
filter(.param == param) %>%
pivot_wider(names_from = ".ch",
values_from = ".val") %>%
mutate(.d.x = scale({{x}}, scale = F),
.d.y = scale({{y}}, scale = F),
.d.z = sqrt(abs(.d.x * .d.y))) %>%
mutate(across(.cols = .d.x:.d.z,
.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.25) +
theme_custom
}
#----
#' @name plot.density
#' @param data a dataframe of flow cytometry data
#' @param x an object; the channel to plot on the x axis; defaults to fsc (forward scatter)
#' @param y an object; the channel to plot on the y axis; defaults to ssc (side scatter)
#' @param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to area because this is the most commonly analyzed metric of fluorescent intensity.
#' @description
#' a wrapper for making a ggplot object of the density of cells on two axes. creates a density column that estimates distance of each observation from the center of the channel. the product of density on both channels defines the density of cells.
plot.density <- function(data, x = fsc, y = ssc, param = ".a"){
data %>%
filter(.param == param) %>%
pivot_wider(names_from = ".ch",
values_from = ".val") %>%
mutate(.d.x = scale({{x}}, scale = F),
.d.y = scale({{y}}, scale = F),
.d.z = sqrt(abs(.d.x * .d.y))) %>%
mutate(across(.cols = .d.x:.d.z,
.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.33) +
theme_custom
}
plot.density(data = data)
#----
#' @name plot.density
#' @param data a dataframe of flow cytometry data
#' @param x an object; the channel to plot on the x axis; defaults to fsc (forward scatter)
#' @param y an object; the channel to plot on the y axis; defaults to ssc (side scatter)
#' @param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to area because this is the most commonly analyzed metric of fluorescent intensity.
#' @description
#' a wrapper for making a ggplot object of the density of cells on two axes. creates a density column that estimates distance of each observation from the center of the channel. the product of density on both channels defines the density of cells.
plot.density <- function(data, x = fsc, y = ssc, param = ".a"){
data %>%
filter(.param == param) %>%
pivot_wider(names_from = ".ch",
values_from = ".val") %>%
mutate(.d.x = scale({{x}}, scale = F),
.d.y = scale({{y}}, scale = F),
.d.z = sqrt(abs(.d.x * .d.y))) %>%
mutate(across(.cols = .d.x:.d.z,
.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.5) +
theme_custom
}
#----
#' @name plot.density
#' @param data a dataframe of flow cytometry data
#' @param x an object; the channel to plot on the x axis; defaults to fsc (forward scatter)
#' @param y an object; the channel to plot on the y axis; defaults to ssc (side scatter)
#' @param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to area because this is the most commonly analyzed metric of fluorescent intensity.
#' @description
#' a wrapper for making a ggplot object of the density of cells on two axes. creates a density column that estimates distance of each observation from the center of the channel. the product of density on both channels defines the density of cells.
plot.density <- function(data, x = fsc, y = ssc, param = ".a", batch = FALSE){
plot <- data %>%
filter(.param == param) %>%
pivot_wider(names_from = ".ch",
values_from = ".val") %>%
mutate(.d.x = scale({{x}}, scale = F),
.d.y = scale({{y}}, scale = F),
.d.z = sqrt(abs(.d.x * .d.y))) %>%
mutate(across(.cols = .d.x:.d.z,
.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.5) +
theme_custom
if(batch == TRUE){
plot <- plot +
facet_grid(cols = .id)
}
return(plot)
}
#----
#' @name plot.wave
#' @param data a dataframe of flow cytometry data
#' @param param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to ".a" because this is the most commonly analyzed metric of fluorescent intensity.
#' @description
#' wrapper for making a ggplot object that plots the fluorescent intensities in each channel of a dataframe as density plots (waves).
plot.wave <- function(data, param = ".a"){
plot <- data %>%
filter(.param == param) %>%
ggplot(aes(x = .val, fill = .ch, alpha = 0.1)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
guides(alpha = "none", fill = "none") +
theme_custom
if(batch == T){
plot <- plot +
facet_wrap(rows = vars(.ch),
cols = vars(.id))
}
return(plot)
}
#----
#' @name plot.wave
#' @param data a dataframe of flow cytometry data
#' @param param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to ".a" because this is the most commonly analyzed metric of fluorescent intensity.
#' #' @param batch a logical of whether to batch process or not. if TRUE, adds additional facets by sample id. defaults to FALSE.
#' @description
#' wrapper for making a ggplot object that plots the fluorescent intensities in each channel of a dataframe as density plots (waves).
plot.wave <- function(data, param = ".a"){
plot <- data %>%
filter(.param == param) %>%
ggplot(aes(x = .val, fill = .ch, alpha = 0.1)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
guides(alpha = "none", fill = "none") +
theme_custom
if(batch == T){
plot <- plot +
facet_wrap(rows = vars(.ch),
cols = vars(.id))
}
return(plot)
}
#----
#' @name plot.density
#' @param data a dataframe of flow cytometry data
#' @param x an object; the channel to plot on the x axis; defaults to fsc (forward scatter)
#' @param y an object; the channel to plot on the y axis; defaults to ssc (side scatter)
#' @param param character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to area because this is the most commonly analyzed metric of fluorescent intensity.
#' @param batch a logical of whether to batch process or not. if TRUE, adds additional facets by sample id. defaults to FALSE.
#' @description
#' a wrapper for making a ggplot object of the density of cells on two axes. creates a density column that estimates distance of each observation from the center of the channel. the product of density on both channels defines the density of cells.
plot.density <- function(data, x = fsc, y = ssc, param = ".a", batch = FALSE){
plot <- data %>%
filter(.param == param) %>%
pivot_wider(names_from = ".ch",
values_from = ".val") %>%
mutate(.d.x = scale({{x}}, scale = F),
.d.y = scale({{y}}, scale = F),
.d.z = sqrt(abs(.d.x * .d.y))) %>%
mutate(across(.cols = .d.x:.d.z,
.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.5) +
theme_custom
if(batch == TRUE){
plot <- plot +
facet_grid(cols = .id)
}
return(plot)
}
#----------------
# visualising
#----------------
#----
plot.wave(data)
#----------------
# visualising
#----------------
#----
plot.wave(data)
#----
#' @name plot.wave
#' @param data a dataframe of flow cytometry data
#' @param param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to ".a" because this is the most commonly analyzed metric of fluorescent intensity.
#' #' @param batch a logical of whether to batch process or not. if TRUE, adds additional facets by sample id. defaults to FALSE.
#' @description
#' wrapper for making a ggplot object that plots the fluorescent intensities in each channel of a dataframe as density plots (waves).
plot.wave <- function(data, param = ".a", batch = FALSE){
plot <- data %>%
filter(.param == param) %>%
ggplot(aes(x = .val, fill = .ch, alpha = 0.1)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
guides(alpha = "none", fill = "none") +
theme_custom
if(batch == TRUE){
plot <- plot +
facet_wrap(rows = vars(.ch),
cols = vars(.id))
}
return(plot)
}
#----------------
# visualising
#----------------
#----
plot.wave(data)
plot.wave(data, batch = T)
#----
#' @name plot.wave
#' @param data a dataframe of flow cytometry data
#' @param param a character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to ".a" because this is the most commonly analyzed metric of fluorescent intensity.
#' #' @param batch a logical of whether to batch process or not. if TRUE, adds additional facets by sample id. defaults to FALSE.
#' @description
#' wrapper for making a ggplot object that plots the fluorescent intensities in each channel of a dataframe as density plots (waves).
plot.wave <- function(data, param = ".a", batch = FALSE){
plot <- data %>%
filter(.param == param) %>%
ggplot(aes(x = .val, fill = .ch, alpha = 0.1)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
guides(alpha = "none", fill = "none") +
theme_custom
if(batch == TRUE){
plot <- plot +
facet_grid(rows = vars(.ch),
cols = vars(.id))
}
return(plot)
}
plot.wave(data, batch = T)
plot.density(data, batch = T)
#----
#' @name plot.density
#' @param data a dataframe of flow cytometry data
#' @param x an object; the channel to plot on the x axis; defaults to fsc (forward scatter)
#' @param y an object; the channel to plot on the y axis; defaults to ssc (side scatter)
#' @param param character specifying the parameter type to plot. for fcs data, this should be ".a" (area), ".h" (height), or ".w" (width). defaults to area because this is the most commonly analyzed metric of fluorescent intensity.
#' @param batch a logical of whether to batch process or not. if TRUE, adds additional facets by sample id. defaults to FALSE.
#' @description
#' a wrapper for making a ggplot object of the density of cells on two axes. creates a density column that estimates distance of each observation from the center of the channel. the product of density on both channels defines the density of cells.
plot.density <- function(data, x = fsc, y = ssc, param = ".a", batch = FALSE){
plot <- data %>%
filter(.param == param) %>%
pivot_wider(names_from = ".ch",
values_from = ".val") %>%
mutate(.d.x = scale({{x}}, scale = F),
.d.y = scale({{y}}, scale = F),
.d.z = sqrt(abs(.d.x * .d.y))) %>%
mutate(across(.cols = .d.x:.d.z,
.fns = ~abs(.x))) %>%
ggplot(aes(x = {{x}},
y = {{y}},
color = .d.z,
alpha = 0.1)) +
geom_point(shape = 21) +
guides(color = "none", alpha = "none") +
scale_color_gradient2(low = "darkred",
mid = "gold",
high = "darkblue",
midpoint = 0.5) +
theme_custom
if(batch == TRUE){
plot <- plot +
facet_grid(cols = vars(.id))
}
return(plot)
}
plot.density(data, batch = T)
data %>%
group_by(.ch) %>%
# many options, but only the geometric mean and robust standard error needed for modelling
reframe(.n = n(),
.geo.mean = geo.mean(.val),
.r.sd = r.sd(.val),
.r.se = r.sd(.val) / sqrt(n()),
.median = median(.val),
.mean = mean(.val),
.sd = sd(.val),
.se = se(.val))
rm(plot)
rm(data.plot)
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' descr
summary.fcs <- function(data, na.rm = T){
data %>%
group_by(.ch) %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
}
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se)
summary.fcs <- function(data, na.rm = T){
data %>%
group_by(.ch) %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
}
data %>%
summary.fcs()
data %>%
group_by(.id) %>%
summary.fcs()
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = T){
data %>%
group_by(.ch, .param) %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
}
data %>%
group_by(.id) %>%
summary.fcs()
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. defaults to FALSE
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = FALSE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. defaults to FALSE
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = FALSE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- data %>%
group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
data %>%
summary.fcs(batch = T)
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. if false, only groups by channel and parameter. defaults to TRUE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = TRUE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- data %>%
group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
source("~/Desktop/extraction/test/plate2/r/func.R", echo=TRUE)
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. if false, only groups by channel and parameter. defaults to FALSE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = FALSE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- data %>%
group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
rm(list = ls())
list.files("../data")
list.files("../data", full.names = T)
# load libraries
pacman::p_load(tidyverse, brms, rstan)
# source functions
source("func.R")
