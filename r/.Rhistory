mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
}
data %>%
summary.fcs()
data %>%
group_by(.id) %>%
summary.fcs()
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = T){
data %>%
group_by(.ch, .param) %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
}
data %>%
group_by(.id) %>%
summary.fcs()
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. defaults to FALSE
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = FALSE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. defaults to FALSE
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = FALSE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- data %>%
group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
data %>%
summary.fcs(batch = T)
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. if false, only groups by channel and parameter. defaults to TRUE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = TRUE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- data %>%
group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
source("~/Desktop/extraction/test/plate2/r/func.R", echo=TRUE)
#----
#' @name summary.fcs
#' @param data a dataframe of fcs data
#' @param na.rm a logical of whether or not to remove missing values from calculations. defaults to TRUE.
#' @param batch a logical of whether to batch process or not. if TRUE, groups by sample id in addition to channel and parameter. if false, only groups by channel and parameter. defaults to FALSE.
#' @description
#' a tidyverse wrapper for calculating common summary statistics for flow cytometry data. includes number of cells (n), median (median), geometric mean (geo.mean), arithmetic mean (mean), standard deviation (sd), standard error (se), robust standard deviation (r.sd), and robust standard error (r.se). automatically groups by channel and parameter.
summary.fcs <- function(data, na.rm = TRUE, batch = FALSE){
if(batch == TRUE){
data <- data %>%
group_by(.id, .ch, .param)
} else {
data <- data %>%
group_by(.ch, .param)
}
data <- data %>%
reframe(.n = n(),
median = median(.val, na.rm = na.rm),
geo.mean = geo.mean(.val, na.rm = na.rm),
mean = mean(.val, na.rm = na.rm),
sd = sd(.val, na.rm = na.rm),
se = se(.val, na.rm = na.rm),
r.sd = r.sd(.val, na.rm = na.rm),
r.se = r.sd(.val, na.rm = na.rm) / sqrt(.n))
return(data)
}
data %>%
summary.fcs()
rm(list = ls())
list.files("../data")
list.files("../data", full.names = T)
# load libraries
pacman::p_load(tidyverse, brms, rstan)
# source functions
source("func.R")
# load libraries
pacman::p_load(tidyverse, brms, rstan)
# source functions
source("func.R")
data <- read.fcs("../data") %>%
# standardize the dataframe
tidy.fcs() %>%
# run preliminary processing
process.fcs() %>%
# only analysing the area channels
filter(.param == ".a") %>%
# separate the id column into the specimen and the sample
separate(.id, into = c(".spec", ".samp"), sep = "_") %>%
# apply channel labels
mutate(.ch = re.code(.ch, mapping = c("alexa.fluor.488" = "af",
"apc" = "dr",
"pe" = "mto",
"percp.cy5.5" = "sox",
"buv.496" = "h42"))) %>%
# summarise the dataframe - need geo.mean and r.se for modelling
group_by(.spec, .samp, .param, .ch) %>%
summary.fcs()
comp.data <- data %>%
filter(.spec == "scc") %>%
filter(.samp != "pos") %>%
filter(.ch != "fsc" & .ch != "ssc") %>%
mutate(.samp = ifelse(.samp == "neg", "af", .samp)) %>%
mutate(geo.mean = 10^geo.mean) %>%
mutate(.comp = ifelse(.samp == .ch, geo.mean, -geo.mean))
comps <- comp.data %>%
group_by(.ch) %>%
reframe(.comp = sum(.comp)) %>%
pivot_wider(names_from = ".ch",
values_from = ".comp") %>%
mutate(fsc = af,
ssc = af) %>%
pivot_longer(everything(),
names_to = ".ch",
values_to = ".comp")
comp.data %>%
# make a compensation matrix
ggplot(aes(x = .ch, y = .samp,
fill = log.sc(.comp), group = .ch)) +
geom_tile(color = "black", linewidth = 0.5) +
scale_fill_gradient2(low = "coral",
mid = "gold",
high = "seagreen") +
geom_text(aes(label = round(.comp, 2)),
color = "black", size = 4) +
xlab("Channel") +
ylab("Control") +
guides(fill = "none") +
theme_custom
comp.data %>%
# make a compensation matrix
ggplot(aes(x = .ch, y = .samp,
fill = .comp, group = .ch)) +
geom_tile(color = "black", linewidth = 0.5) +
scale_fill_gradient2(low = "coral",
mid = "gold",
high = "seagreen") +
geom_text(aes(label = round(.comp, 2)),
color = "black", size = 4) +
xlab("Channel") +
ylab("Control") +
guides(fill = "none") +
theme_custom
data <- read.fcs("../data") %>%
# standardize the dataframe
tidy.fcs() %>%
# run preliminary processing
process.fcs() %>%
# only analysing the area channels
filter(.param == ".a") %>%
# separate the id column into the specimen and the sample
separate(.id, into = c(".spec", ".samp"), sep = "_") %>%
# apply channel labels
mutate(.ch = re.code(.ch, mapping = c("alexa.fluor.488" = "af",
"apc" = "dr",
"pe" = "mto",
"percp.cy5.5" = "sox",
"buv.496" = "h42"))) %>%
# summarise the dataframe - need geo.mean and r.se for modelling
group_by(.spec, .samp, .param, .ch) %>%
summary.fcs() %>%
filter(.spec == "scc") %>%
filter(.samp != "pos") %>%
filter(.ch != "fsc" & .ch != "ssc") %>%
mutate(.samp = ifelse(.samp == "neg", "af", .samp)) %>%
mutate(geo.mean = 10^geo.mean) %>%
mutate(.comp = ifelse(.samp == .ch, geo.mean, -geo.mean))
comps <- data %>%
group_by(.ch) %>%
reframe(.comp = sum(.comp)) %>%
pivot_wider(names_from = ".ch",
values_from = ".comp") %>%
mutate(fsc = af,
ssc = af) %>%
pivot_longer(everything(),
names_to = ".ch",
values_to = ".comp")
# bookkeeping
pacman::p_load(tidyverse)
source("func.R")
#----------
# processing
#----------
#----
# load data
data <- read.fcs("../data/")
#----------
# processing
#----------
#----
# load data
data <- read.fcs("../data/") %>%
# standardize the dataframe
tidy.fcs() %>%
# run preliminary processing
process.fcs()
data %>%
filter(.spec == "scc") %>%
ggplot(aes(x = .val, col = .samp)) +
geom_density() +
facet_grid(rows = .ch) +
theme_classic()
#----
# load data
data <- read.fcs("../data/") %>%
# standardize the dataframe
tidy.fcs() %>%
# run preliminary processing
process.fcs() %>%
separate(col = .id,
into = c(".spec", ".samp"),
sep = "_")
data %>%
filter(.spec == "scc") %>%
ggplot(aes(x = .val, col = .samp)) +
geom_density() +
facet_grid(rows = .ch) +
theme_classic()
source("~/.active-rstudio-document", echo=TRUE)
data %>%
filter(.spec == "scc") %>%
ggplot(aes(x = .val, col = .samp)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
theme_classic()
#----
# load data
data <- read.fcs("../data/") %>%
# standardize the dataframe
tidy.fcs() %>%
# run preliminary processing
process.fcs() %>%
separate(col = .id,
into = c(".spec", ".samp"),
sep = "_") %>%
# apply channel labels
mutate(.ch = re.code(.ch, mapping = c("alexa.fluor.488" = "af",
"apc" = "dr",
"pe" = "mto",
"percp.cy5.5" = "sox",
"buv.496" = "h42")))
data %>%
filter(.spec == "scc") %>%
ggplot(aes(x = .val, col = .samp)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
theme_classic()
data %>%
filter(.spec == "scc") %>%
ggplot(aes(x = .val, fill = .samp, alpha = 0.1)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
theme_classic()
data.scc <- data%>%
filter(.spec == "scc")
data.scc <- data %>%
filter(.spec == "scc") %>%
group_by(.samp, .ch) %>%
reframe(.comp = geo.mean(.comp),
.comp.se = r.se(.comp))
data.scc <- data %>%
filter(.spec == "scc") %>%
group_by(.samp, .ch) %>%
reframe(.comp = geo.mean(.val),
.comp.se = r.se(.val))
data.scc <- data %>%
filter(.spec == "scc") %>%
group_by(.samp, .ch) %>%
reframe(.comp = geo.mean(.val),
.comp.se = r.se(.val))
data.scc <- data %>%
filter(.spec == "scc") %>%
group_by(.samp, .ch) %>%
summary.fcs()
View(data.scc)
data.scc <- data %>%
filter(.spec == "scc") %>%
group_by(.samp, .ch) %>%
summary.fcs() %>%
mutate(.comp = 10^geo.mean)
data.scc <- data %>%
filter(.spec == "scc" & .samp != "pos") %>%
group_by(.samp, .ch) %>%
summary.fcs() %>%
mutate(.comp = 10^geo.mean)
data.scc <- data %>%
filter(.spec == "scc" & .samp != "pos") %>%
group_by(.samp, .ch) %>%
summary.fcs() %>%
filter(.spec == "scc") %>%
filter(.samp != "pos") %>%
filter(.ch != "fsc" & .ch != "ssc") %>%
mutate(.samp = ifelse(.samp == "neg", "af", .samp)) %>%
mutate(geo.mean = 10^geo.mean) %>%
mutate(.comp = ifelse(.samp == .ch, geo.mean, -geo.mean))
data.scc <- data %>%
filter(.spec == "scc") %>%
filter(.samp != "pos") %>%
filter(.ch != "fsc" & .ch != "ssc") %>%
group_by(.samp, .ch) %>%
mutate(.samp = ifelse(.samp == "neg", "af", .samp)) %>%
summary.fcs() %>%
mutate(geo.mean = 10^geo.mean) %>%
mutate(.comp = ifelse(.samp == .ch, geo.mean, -geo.mean))
View(data.scc)
data.scc <- data %>%
filter(.spec == "scc") %>%
filter(.samp != "pos") %>%
filter(.ch != "fsc" & .ch != "ssc") %>%
group_by(.samp, .ch) %>%
mutate(.samp = ifelse(.samp == "neg", "af", .samp)) %>%
summary.fcs() %>%
mutate(geo.mean = 10^geo.mean) %>%
mutate(.comp = ifelse(.samp == .ch, geo.mean, -geo.mean))
data %>%
ggplot(aes(x = .ch, y = .samp, fill = .comp, alpha = 0.1)) +
geom_tile() +
theme_classic()
data.scc %>%
ggplot(aes(x = .ch, y = .samp, fill = .comp, alpha = 0.1)) +
geom_tile() +
theme_classic()
data.scc %>%
# make a compensation matrix
ggplot(aes(x = .ch, y = .samp,
fill = .comp, group = .ch)) +
geom_tile(color = "black", linewidth = 0.5) +
scale_fill_gradient2(low = "coral",
mid = "gold",
high = "seagreen") +
geom_text(aes(label = round(.comp, 2)),
color = "black", size = 4) +
xlab("Channel") +
ylab("Control") +
guides(fill = "none") +
theme_custom
comps <- data.scc %>%
group_by(.ch) %>%
reframe(.comp = sum(.comp))
View(comps)
comps <- data.scc %>%
group_by(.ch) %>%
reframe(.comp = sum(.comp)) %>%
pivot_wider(names_from = ".ch",
values_from = ".val")
comps <- data.scc %>%
group_by(.ch) %>%
reframe(.comp = sum(.comp)) %>%
pivot_wider(names_from = ".ch",
values_from = ".comp")
comps <- data.scc %>%
group_by(.ch) %>%
reframe(.comp = sum(.comp)) %>%
pivot_wider(names_from = ".ch",
values_from = ".comp") %>%
mutate(fsc = af,
ssc = af) %>%
pivot_longer(cols = everything(),
names_to = ".ch",
values_to = ".comp")
View(comps)
data %>%
left_join(comps)
data %>%
left_join(comps) %>%
mutate(.val = 10^.val)
data.comp <- read.fcs("../data/") %>%
tidy.fcs() %>%
left_join(comps)
View(data.comp)
data.comp <- read.fcs("../data/") %>%
tidy.fcs() %>%
# apply channel labels
mutate(.ch = re.code(.ch, mapping = c("alexa.fluor.488" = "af",
"apc" = "dr",
"pe" = "mto",
"percp.cy5.5" = "sox",
"buv.496" = "h42"))) %>%
left_join(comps) %>%
mutate(.val = .val - .comp) %>%
process.fcs()
data.comp <- read.fcs("../data/") %>%
tidy.fcs() %>%
# apply channel labels
mutate(.ch = re.code(.ch, mapping = c("alexa.fluor.488" = "af",
"apc" = "dr",
"pe" = "mto",
"percp.cy5.5" = "sox",
"buv.496" = "h42"))) %>%
left_join(comps) %>%
mutate(.val = .val - .comp)
View(data.comp)
data.comp %>%
process.fcs()
data.comp %>%
select(-.comp) %>%
process.fcs()
data.comp %>%
select(-.comp) %>%
process.fcs() %>%
ggplot(aes(x = .val, col = .id)) +
geom_density() +
facet_grid(rows = vars(.ch)) +
theme_classic()
data.comp %>%
select(-.comp) %>%
process.fcs() %>%
plot.density()
data.comp %>%
select(-.comp) %>%
process.fcs() %>%
plot.density(x = mto, y = sox)
data.comp %>%
select(-.comp) %>%
process.fcs() %>%
separate(.id, into = c(".spec", ".samp"), sep = "_") %>%
filter(.spec != "scc") %>%
plot.density(x = mto, y = sox)
data %>%
# make a compensation matrix
ggplot(aes(x = .ch, y = .samp,
fill = .comp, group = .ch)) +
geom_tile(color = "black", linewidth = 0.5) +
scale_fill_gradient2(low = "coral",
mid = "gold",
high = "seagreen") +
geom_text(aes(label = round(.comp, 2)),
color = "black", size = 4) +
xlab("Channel") +
ylab("Control") +
guides(fill = "none") +
theme_custom
?everything
?separate
?c
